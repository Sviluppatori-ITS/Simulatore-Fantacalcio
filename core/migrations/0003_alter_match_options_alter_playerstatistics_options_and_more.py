# Generated by Django 5.2.3 on 2025-09-02 08:19

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0002_seasonteam_season"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="match",
            options={
                "ordering": ["tournament", "round", "kickoff_datetime"],
                "verbose_name": "Partita",
                "verbose_name_plural": "Partite",
            },
        ),
        migrations.AlterModelOptions(
            name="playerstatistics",
            options={
                "ordering": ["-matches_played", "-goals_scored", "-assists_made"],
                "verbose_name": "Statistiche Giocatore",
                "verbose_name_plural": "Statistiche Giocatori",
            },
        ),
        migrations.RemoveField(
            model_name="round",
            name="match_day",
        ),
        migrations.RemoveField(
            model_name="round",
            name="matches",
        ),
        migrations.AddField(
            model_name="match",
            name="away_corners",
            field=models.PositiveIntegerField(
                blank=True, help_text="Calci d'angolo squadra ospite", null=True
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="away_fouls",
            field=models.PositiveIntegerField(
                blank=True, help_text="Falli commessi squadra ospite", null=True
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="away_possession",
            field=models.FloatField(
                blank=True, help_text="Possesso palla squadra ospite (%)", null=True
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="away_shots",
            field=models.PositiveIntegerField(
                blank=True, help_text="Tiri totali squadra ospite", null=True
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="away_shots_on_target",
            field=models.PositiveIntegerField(
                blank=True, help_text="Tiri in porta squadra ospite", null=True
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="cancelled",
            field=models.BooleanField(
                default=False, help_text="Indica se la partita è stata annullata"
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="home_corners",
            field=models.PositiveIntegerField(
                blank=True, help_text="Calci d'angolo squadra di casa", null=True
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="home_fouls",
            field=models.PositiveIntegerField(
                blank=True, help_text="Falli commessi squadra di casa", null=True
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="home_possession",
            field=models.FloatField(
                blank=True, help_text="Possesso palla squadra di casa (%)", null=True
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="home_shots",
            field=models.PositiveIntegerField(
                blank=True, help_text="Tiri totali squadra di casa", null=True
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="home_shots_on_target",
            field=models.PositiveIntegerField(
                blank=True, help_text="Tiri in porta squadra di casa", null=True
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="postponed",
            field=models.BooleanField(
                default=False, help_text="Indica se la partita è stata rinviata"
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="referee",
            field=models.CharField(
                blank=True, help_text="Arbitro della partita", max_length=200
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="round",
            field=models.ForeignKey(
                blank=True,
                help_text="Giornata della partita",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="matches",
                to="core.round",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="venue",
            field=models.CharField(
                blank=True, help_text="Luogo della partita", max_length=200
            ),
        ),
        migrations.AddField(
            model_name="player",
            name="fitness_level",
            field=models.PositiveSmallIntegerField(
                default=100, help_text="Livello di forma fisica (1-100)"
            ),
        ),
        migrations.AddField(
            model_name="player",
            name="injury_description",
            field=models.CharField(
                blank=True,
                help_text="Descrizione dell'infortunio",
                max_length=200,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="player",
            name="is_injured",
            field=models.BooleanField(
                default=False, help_text="Indica se il giocatore è infortunato"
            ),
        ),
        migrations.AddField(
            model_name="player",
            name="is_suspended",
            field=models.BooleanField(
                default=False, help_text="Indica se il giocatore è squalificato"
            ),
        ),
        migrations.AddField(
            model_name="player",
            name="return_date",
            field=models.DateField(
                blank=True,
                help_text="Data prevista di rientro dall'infortunio",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="player",
            name="secondary_role",
            field=models.CharField(
                blank=True,
                choices=[
                    ("P", "Portiere"),
                    ("DC", "Difensore Centrale"),
                    ("DS", "Difensore Sinistro"),
                    ("DD", "Difensore Destro"),
                    ("D", "Difensore Generico"),
                    ("CC", "Centrocampista Centrale"),
                    ("CDC", "Centrocampista Difensivo"),
                    ("COC", "Centrocampista Offensivo"),
                    ("CS", "Centrocampista Sinistro"),
                    ("CD", "Centrocampista Destro"),
                    ("C", "Centrocampista Generico"),
                    ("AS", "Ala Sinistra"),
                    ("AD", "Ala Destra"),
                    ("PC", "Punta Centrale"),
                    ("A", "Attaccante Generico"),
                ],
                help_text="Ruolo secondario del giocatore",
                max_length=20,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="player",
            name="suspension_matches",
            field=models.PositiveSmallIntegerField(
                default=0, help_text="Numero di partite di squalifica rimanenti"
            ),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="accurate_passes",
            field=models.PositiveIntegerField(default=0, help_text="Passaggi precisi"),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="bonus_points",
            field=models.FloatField(default=0.0, help_text="Punti bonus totali"),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="clean_sheets",
            field=models.PositiveIntegerField(
                default=0, help_text="Porte inviolate (portieri e difensori)"
            ),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="fanta_average",
            field=models.FloatField(default=0.0, help_text="Media fantavoto"),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="fanta_total",
            field=models.FloatField(default=0.0, help_text="Totale fantavoto"),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="fouls_committed",
            field=models.PositiveIntegerField(default=0, help_text="Falli commessi"),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="fouls_suffered",
            field=models.PositiveIntegerField(default=0, help_text="Falli subiti"),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="goals_conceded",
            field=models.PositiveIntegerField(
                default=0, help_text="Gol subiti (portieri)"
            ),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="interceptions",
            field=models.PositiveIntegerField(default=0, help_text="Intercetti"),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="key_passes",
            field=models.PositiveIntegerField(default=0, help_text="Passaggi chiave"),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="malus_points",
            field=models.FloatField(default=0.0, help_text="Punti malus totali"),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="matches_started",
            field=models.PositiveIntegerField(
                default=0, help_text="Partite iniziate da titolare"
            ),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="minutes_played",
            field=models.PositiveIntegerField(default=0, help_text="Minuti giocati"),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="own_goals",
            field=models.PositiveIntegerField(default=0, help_text="Autogol"),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="pass_success_rate",
            field=models.FloatField(
                default=0.0, help_text="Percentuale passaggi riusciti"
            ),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="penalties_missed",
            field=models.PositiveIntegerField(default=0, help_text="Rigori sbagliati"),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="penalties_saved",
            field=models.PositiveIntegerField(
                default=0, help_text="Rigori parati (portieri)"
            ),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="penalties_scored",
            field=models.PositiveIntegerField(default=0, help_text="Rigori segnati"),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="saves",
            field=models.PositiveIntegerField(default=0, help_text="Parate (portieri)"),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="season",
            field=models.ForeignKey(
                blank=True,
                help_text="Stagione di riferimento",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="player_statistics",
                to="core.season",
            ),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="shots",
            field=models.PositiveIntegerField(default=0, help_text="Tiri totali"),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="shots_on_target",
            field=models.PositiveIntegerField(default=0, help_text="Tiri in porta"),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="tackles",
            field=models.PositiveIntegerField(default=0, help_text="Tackle"),
        ),
        migrations.AddField(
            model_name="playerstatistics",
            name="tournament",
            field=models.ForeignKey(
                blank=True,
                help_text="Torneo di riferimento",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="player_statistics",
                to="core.tournament",
            ),
        ),
        migrations.AddField(
            model_name="round",
            name="number",
            field=models.PositiveIntegerField(
                default=1, help_text="Numero della giornata o turno"
            ),
        ),
        migrations.AlterField(
            model_name="match",
            name="away_score",
            field=models.PositiveIntegerField(
                blank=True, help_text="Gol squadra ospite", null=True
            ),
        ),
        migrations.AlterField(
            model_name="match",
            name="away_team",
            field=models.ForeignKey(
                help_text="Squadra ospite",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="away_matches",
                to="core.team",
            ),
        ),
        migrations.AlterField(
            model_name="match",
            name="home_score",
            field=models.PositiveIntegerField(
                blank=True, help_text="Gol squadra di casa", null=True
            ),
        ),
        migrations.AlterField(
            model_name="match",
            name="home_team",
            field=models.ForeignKey(
                help_text="Squadra di casa",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="home_matches",
                to="core.team",
            ),
        ),
        migrations.AlterField(
            model_name="match",
            name="kickoff_datetime",
            field=models.DateTimeField(
                blank=True, help_text="Data e ora di inizio", null=True
            ),
        ),
        migrations.AlterField(
            model_name="match",
            name="played",
            field=models.BooleanField(
                default=False, help_text="Indica se la partita è stata giocata"
            ),
        ),
        migrations.AlterField(
            model_name="match",
            name="tournament",
            field=models.ForeignKey(
                help_text="Torneo a cui appartiene la partita",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="matches",
                to="core.tournament",
            ),
        ),
        migrations.AlterField(
            model_name="player",
            name="main_role",
            field=models.CharField(
                blank=True,
                choices=[
                    ("P", "Portiere"),
                    ("DC", "Difensore Centrale"),
                    ("DS", "Difensore Sinistro"),
                    ("DD", "Difensore Destro"),
                    ("D", "Difensore Generico"),
                    ("CC", "Centrocampista Centrale"),
                    ("CDC", "Centrocampista Difensivo"),
                    ("COC", "Centrocampista Offensivo"),
                    ("CS", "Centrocampista Sinistro"),
                    ("CD", "Centrocampista Destro"),
                    ("C", "Centrocampista Generico"),
                    ("AS", "Ala Sinistra"),
                    ("AD", "Ala Destra"),
                    ("PC", "Punta Centrale"),
                    ("A", "Attaccante Generico"),
                ],
                help_text="Ruolo principale del giocatore",
                max_length=20,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="playerstatistics",
            name="assists_made",
            field=models.PositiveIntegerField(default=0, help_text="Assist effettuati"),
        ),
        migrations.AlterField(
            model_name="playerstatistics",
            name="goals_scored",
            field=models.PositiveIntegerField(default=0, help_text="Gol segnati"),
        ),
        migrations.AlterField(
            model_name="playerstatistics",
            name="matches_played",
            field=models.PositiveIntegerField(default=0, help_text="Partite giocate"),
        ),
        migrations.AlterField(
            model_name="playerstatistics",
            name="player",
            field=models.ForeignKey(
                help_text="Il giocatore a cui appartengono le statistiche",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="statistics",
                to="core.player",
                verbose_name="Giocatore",
            ),
        ),
        migrations.AlterField(
            model_name="playerstatistics",
            name="red_cards",
            field=models.PositiveIntegerField(default=0, help_text="Cartellini rossi"),
        ),
        migrations.AlterField(
            model_name="playerstatistics",
            name="yellow_cards",
            field=models.PositiveIntegerField(default=0, help_text="Cartellini gialli"),
        ),
        migrations.AlterUniqueTogether(
            name="playerstatistics",
            unique_together={("player", "season", "tournament")},
        ),
        migrations.CreateModel(
            name="FantaLeague",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(help_text="Nome della lega", max_length=100)),
                (
                    "description",
                    models.TextField(blank=True, help_text="Descrizione della lega"),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        help_text="Logo della lega",
                        null=True,
                        upload_to="fanta_leagues/",
                    ),
                ),
                (
                    "is_private",
                    models.BooleanField(
                        default=True,
                        help_text="Indica se la lega è privata (richiede invito)",
                    ),
                ),
                (
                    "invite_code",
                    models.CharField(
                        blank=True,
                        help_text="Codice di invito per leghe private",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "max_teams",
                    models.PositiveIntegerField(
                        default=10, help_text="Numero massimo di squadre nella lega"
                    ),
                ),
                (
                    "initial_budget",
                    models.IntegerField(
                        default=500,
                        help_text="Budget iniziale per ogni squadra in crediti",
                    ),
                ),
                (
                    "auction_type",
                    models.CharField(
                        choices=[
                            ("live", "Asta Live"),
                            ("silent", "Asta Silenziosa"),
                            ("auto", "Asta Automatica"),
                        ],
                        default="live",
                        help_text="Tipo di asta",
                        max_length=20,
                    ),
                ),
                (
                    "auction_date",
                    models.DateTimeField(
                        blank=True, help_text="Data di inizio dell'asta", null=True
                    ),
                ),
                (
                    "scoring_system",
                    models.CharField(
                        choices=[
                            ("classic", "Classico"),
                            ("bonus", "Con Bonus/Malus"),
                            ("custom", "Personalizzato"),
                        ],
                        default="classic",
                        help_text="Sistema di punteggio",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "admin",
                    models.ForeignKey(
                        help_text="Amministratore della lega",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="administered_leagues",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "season",
                    models.ForeignKey(
                        help_text="Stagione di riferimento",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fanta_leagues",
                        to="core.season",
                    ),
                ),
                (
                    "tournament",
                    models.ForeignKey(
                        help_text="Torneo di riferimento",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fanta_leagues",
                        to="core.tournament",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lega Fantacalcio",
                "verbose_name_plural": "Leghe Fantacalcio",
            },
        ),
        migrations.CreateModel(
            name="FantaLeagueRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Nome della regola", max_length=100),
                ),
                (
                    "description",
                    models.TextField(help_text="Descrizione dettagliata della regola"),
                ),
                (
                    "goal_value",
                    models.FloatField(default=3.0, help_text="Punti per ogni gol"),
                ),
                (
                    "assist_value",
                    models.FloatField(default=1.0, help_text="Punti per ogni assist"),
                ),
                (
                    "clean_sheet_value",
                    models.FloatField(
                        default=1.0,
                        help_text="Punti per porta inviolata (difensori e portieri)",
                    ),
                ),
                (
                    "yellow_card_value",
                    models.FloatField(default=-0.5, help_text="Punti per ammonizione"),
                ),
                (
                    "red_card_value",
                    models.FloatField(default=-1.0, help_text="Punti per espulsione"),
                ),
                (
                    "goal_conceded_value",
                    models.FloatField(
                        default=-1.0, help_text="Punti per gol subito (portieri)"
                    ),
                ),
                (
                    "penalty_saved_value",
                    models.FloatField(default=3.0, help_text="Punti per rigore parato"),
                ),
                (
                    "penalty_missed_value",
                    models.FloatField(
                        default=-3.0, help_text="Punti per rigore sbagliato"
                    ),
                ),
                (
                    "own_goal_value",
                    models.FloatField(default=-2.0, help_text="Punti per autogol"),
                ),
                (
                    "formation_lock_time",
                    models.IntegerField(
                        default=10,
                        help_text="Minuti prima del calcio d'inizio per bloccare le formazioni",
                    ),
                ),
                (
                    "max_players_same_team",
                    models.PositiveIntegerField(
                        default=5,
                        help_text="Numero massimo di giocatori della stessa squadra",
                    ),
                ),
                (
                    "transfer_window_open",
                    models.BooleanField(
                        default=True, help_text="Indica se il mercato è aperto"
                    ),
                ),
                (
                    "max_transfers_per_week",
                    models.PositiveIntegerField(
                        default=3,
                        help_text="Numero massimo di trasferimenti a settimana",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "fanta_league",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rules",
                        to="core.fantaleague",
                    ),
                ),
            ],
            options={
                "verbose_name": "Regola Lega Fantacalcio",
                "verbose_name_plural": "Regole Lega Fantacalcio",
            },
        ),
        migrations.CreateModel(
            name="FantaLineup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "formation",
                    models.CharField(
                        help_text="Schema tattico (es. 4-3-3, 3-5-2)", max_length=10
                    ),
                ),
                (
                    "is_submitted",
                    models.BooleanField(
                        default=False,
                        help_text="Indica se la formazione è stata confermata",
                    ),
                ),
                (
                    "submission_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="Orario di invio della formazione",
                        null=True,
                    ),
                ),
                (
                    "total_score",
                    models.FloatField(
                        default=0.0, help_text="Punteggio totale della formazione"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "round",
                    models.ForeignKey(
                        help_text="Giornata di riferimento",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lineups",
                        to="core.round",
                    ),
                ),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lineups",
                        to="core.tournament",
                    ),
                ),
            ],
            options={
                "verbose_name": "Formazione Fantacalcio",
                "verbose_name_plural": "Formazioni Fantacalcio",
            },
        ),
        migrations.CreateModel(
            name="FantaLineupPlayer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "position",
                    models.PositiveSmallIntegerField(
                        help_text="Posizione nella formazione (1-11 titolari, 12+ riserve)"
                    ),
                ),
                (
                    "is_starter",
                    models.BooleanField(
                        default=False, help_text="Indica se il giocatore è titolare"
                    ),
                ),
                (
                    "is_captain",
                    models.BooleanField(
                        default=False, help_text="Indica se il giocatore è capitano"
                    ),
                ),
                (
                    "is_vice_captain",
                    models.BooleanField(
                        default=False,
                        help_text="Indica se il giocatore è vice-capitano",
                    ),
                ),
                (
                    "score",
                    models.FloatField(blank=True, help_text="Voto base", null=True),
                ),
                (
                    "bonus_points",
                    models.FloatField(
                        default=0.0, help_text="Punti bonus/malus complessivi"
                    ),
                ),
                (
                    "fanta_lineup",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="players",
                        to="core.fantalineup",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.player"
                    ),
                ),
            ],
            options={
                "verbose_name": "Giocatore in Formazione",
                "verbose_name_plural": "Giocatori in Formazione",
                "ordering": ["position"],
                "unique_together": {("fanta_lineup", "player")},
            },
        ),
        migrations.CreateModel(
            name="FantaLineupSubstitution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        help_text="Motivazione della sostituzione", max_length=100
                    ),
                ),
                (
                    "is_applied",
                    models.BooleanField(
                        default=False,
                        help_text="Indica se la sostituzione è stata applicata",
                    ),
                ),
                (
                    "fanta_lineup",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substitutions",
                        to="core.fantalineup",
                    ),
                ),
                (
                    "player_out",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substitutions_out",
                        to="core.fantalineupplayer",
                    ),
                ),
                (
                    "substitute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substitutions_in",
                        to="core.fantalineupplayer",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sostituzione",
                "verbose_name_plural": "Sostituzioni",
            },
        ),
        migrations.CreateModel(
            name="FantaTeam",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nome della squadra di fantacalcio", max_length=100
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        help_text="Logo della squadra",
                        null=True,
                        upload_to="fanta_teams/",
                    ),
                ),
                (
                    "budget",
                    models.IntegerField(
                        default=500,
                        help_text="Budget disponibile per il mercato (in crediti)",
                    ),
                ),
                (
                    "motto",
                    models.CharField(
                        blank=True, help_text="Motto della squadra", max_length=200
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="Proprietario della squadra",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fanta_teams",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "season",
                    models.ForeignKey(
                        help_text="Stagione di riferimento",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fanta_teams",
                        to="core.season",
                    ),
                ),
            ],
            options={
                "verbose_name": "Squadra Fantacalcio",
                "verbose_name_plural": "Squadre Fantacalcio",
            },
        ),
        migrations.AddField(
            model_name="fantalineup",
            name="fanta_team",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="lineups",
                to="core.fantateam",
            ),
        ),
        migrations.AddField(
            model_name="fantaleague",
            name="teams",
            field=models.ManyToManyField(
                help_text="Squadre partecipanti alla lega",
                related_name="leagues",
                to="core.fantateam",
            ),
        ),
        migrations.CreateModel(
            name="AuctionBid",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("amount", models.IntegerField(help_text="Offerta in crediti")),
                (
                    "is_winning",
                    models.BooleanField(
                        default=False, help_text="Indica se questa è l'offerta vincente"
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bids",
                        to="core.player",
                    ),
                ),
                (
                    "league",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bids",
                        to="core.fantaleague",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bids",
                        to="core.fantateam",
                    ),
                ),
            ],
            options={
                "verbose_name": "Offerta Asta",
                "verbose_name_plural": "Offerte Asta",
                "ordering": ["-amount", "timestamp"],
            },
        ),
        migrations.CreateModel(
            name="FantaTeamPlayer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "purchase_price",
                    models.IntegerField(help_text="Prezzo di acquisto in crediti"),
                ),
                (
                    "purchase_date",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Data di acquisto"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indica se il giocatore è ancora nella rosa",
                    ),
                ),
                (
                    "fanta_team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.fantateam"
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.player"
                    ),
                ),
            ],
            options={
                "verbose_name": "Giocatore in Rosa",
                "verbose_name_plural": "Giocatori in Rosa",
                "unique_together": {("fanta_team", "player")},
            },
        ),
        migrations.AddField(
            model_name="fantateam",
            name="players",
            field=models.ManyToManyField(
                help_text="Giocatori nella rosa",
                related_name="fanta_teams",
                through="core.FantaTeamPlayer",
                to="core.player",
            ),
        ),
        migrations.CreateModel(
            name="MarketTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("buy", "Acquisto"),
                            ("sell", "Vendita"),
                            ("trade", "Scambio"),
                            ("loan", "Prestito"),
                            ("bid", "Offerta Asta"),
                            ("free_agent", "Svincolato"),
                        ],
                        help_text="Tipo di transazione",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "In attesa"),
                            ("completed", "Completata"),
                            ("rejected", "Rifiutata"),
                            ("cancelled", "Annullata"),
                        ],
                        default="pending",
                        help_text="Stato della transazione",
                        max_length=20,
                    ),
                ),
                (
                    "price",
                    models.IntegerField(
                        default=0, help_text="Prezzo della transazione in crediti"
                    ),
                ),
                (
                    "price_adjustment",
                    models.IntegerField(
                        default=0, help_text="Conguaglio economico per lo scambio"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Data di completamento della transazione",
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Note aggiuntive sulla transazione"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="Utente che ha creato la transazione",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_transactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "league",
                    models.ForeignKey(
                        help_text="Lega in cui avviene la transazione",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transactions",
                        to="core.fantaleague",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        blank=True,
                        help_text="Giocatore coinvolto nella transazione",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transactions",
                        to="core.player",
                    ),
                ),
                (
                    "player_counterparty",
                    models.ForeignKey(
                        blank=True,
                        help_text="Giocatore ricevuto nello scambio",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="counterparty_transactions",
                        to="core.player",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        blank=True,
                        help_text="Squadra che effettua la transazione",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transactions",
                        to="core.fantateam",
                    ),
                ),
                (
                    "team_counterparty",
                    models.ForeignKey(
                        blank=True,
                        help_text="Squadra controparte nello scambio",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="counterparty_transactions",
                        to="core.fantateam",
                    ),
                ),
            ],
            options={
                "verbose_name": "Transazione di Mercato",
                "verbose_name_plural": "Transazioni di Mercato",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="FantaScore",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "vote",
                    models.FloatField(
                        blank=True,
                        help_text="Voto base del giocatore (senza bonus/malus)",
                        null=True,
                    ),
                ),
                (
                    "minutes_played",
                    models.PositiveIntegerField(default=0, help_text="Minuti giocati"),
                ),
                (
                    "entered_at",
                    models.PositiveIntegerField(
                        blank=True, help_text="Minuto di ingresso", null=True
                    ),
                ),
                (
                    "exited_at",
                    models.PositiveIntegerField(
                        blank=True, help_text="Minuto di uscita", null=True
                    ),
                ),
                (
                    "goals",
                    models.PositiveIntegerField(default=0, help_text="Gol segnati"),
                ),
                (
                    "assists",
                    models.PositiveIntegerField(
                        default=0, help_text="Assist effettuati"
                    ),
                ),
                (
                    "penalties_scored",
                    models.PositiveIntegerField(default=0, help_text="Rigori segnati"),
                ),
                (
                    "penalties_saved",
                    models.PositiveIntegerField(
                        default=0, help_text="Rigori parati (portieri)"
                    ),
                ),
                (
                    "clean_sheet",
                    models.BooleanField(
                        default=False,
                        help_text="Porta inviolata (portieri e difensori)",
                    ),
                ),
                (
                    "yellow_cards",
                    models.PositiveIntegerField(
                        default=0, help_text="Cartellini gialli"
                    ),
                ),
                (
                    "red_cards",
                    models.PositiveIntegerField(
                        default=0, help_text="Cartellini rossi"
                    ),
                ),
                (
                    "own_goals",
                    models.PositiveIntegerField(default=0, help_text="Autogol"),
                ),
                (
                    "penalties_missed",
                    models.PositiveIntegerField(
                        default=0, help_text="Rigori sbagliati"
                    ),
                ),
                (
                    "goals_conceded",
                    models.PositiveIntegerField(
                        default=0, help_text="Gol subiti (portieri)"
                    ),
                ),
                (
                    "shots",
                    models.PositiveIntegerField(default=0, help_text="Tiri effettuati"),
                ),
                (
                    "shots_on_target",
                    models.PositiveIntegerField(default=0, help_text="Tiri in porta"),
                ),
                (
                    "key_passes",
                    models.PositiveIntegerField(default=0, help_text="Passaggi chiave"),
                ),
                (
                    "accurate_passes",
                    models.PositiveIntegerField(
                        default=0, help_text="Passaggi precisi"
                    ),
                ),
                (
                    "tackles",
                    models.PositiveIntegerField(
                        default=0, help_text="Tackle effettuati"
                    ),
                ),
                (
                    "interceptions",
                    models.PositiveIntegerField(default=0, help_text="Intercetti"),
                ),
                (
                    "saves",
                    models.PositiveIntegerField(
                        default=0, help_text="Parate (portieri)"
                    ),
                ),
                (
                    "final_score",
                    models.FloatField(
                        default=0.0, help_text="Punteggio finale (voto + bonus/malus)"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "match",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="player_scores",
                        to="core.match",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fanta_scores",
                        to="core.player",
                    ),
                ),
                (
                    "round",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="player_scores",
                        to="core.round",
                    ),
                ),
            ],
            options={
                "verbose_name": "Voto Fantacalcio",
                "verbose_name_plural": "Voti Fantacalcio",
                "ordering": ["-round__number", "-final_score"],
                "unique_together": {("player", "match")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="fantalineup",
            unique_together={("fanta_team", "round")},
        ),
        migrations.AlterUniqueTogether(
            name="fantaleague",
            unique_together={("name", "season", "admin")},
        ),
        migrations.AlterUniqueTogether(
            name="fantateam",
            unique_together={("name", "owner", "season")},
        ),
    ]
