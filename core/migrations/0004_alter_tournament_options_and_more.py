# Generated by Django 5.2.3 on 2025-09-02 08:50

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0003_alter_match_options_alter_playerstatistics_options_and_more"),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="tournament",
            options={
                "ordering": ["season__year", "name"],
                "verbose_name": "Torneo",
                "verbose_name_plural": "Tornei",
            },
        ),
        migrations.AlterModelOptions(
            name="tournamentqualificationrule",
            options={
                "ordering": ["from_tournament", "min_rank"],
                "verbose_name": "Regola di Qualificazione",
                "verbose_name_plural": "Regole di Qualificazione",
            },
        ),
        migrations.AlterModelOptions(
            name="tournamentranking",
            options={
                "ordering": ["tournament", "group", "-points", "-win", "goals_against"],
                "verbose_name": "Classifica Torneo",
                "verbose_name_plural": "Classifiche Tornei",
            },
        ),
        migrations.AlterModelOptions(
            name="tournamentstructure",
            options={
                "verbose_name": "Struttura Torneo",
                "verbose_name_plural": "Strutture Tornei",
            },
        ),
        migrations.AlterUniqueTogether(
            name="tournamentranking",
            unique_together=set(),
        ),
        migrations.AddField(
            model_name="tournament",
            name="max_teams",
            field=models.PositiveIntegerField(
                default=20, help_text="Numero massimo di squadre ammesse"
            ),
        ),
        migrations.AddField(
            model_name="tournament",
            name="min_teams",
            field=models.PositiveIntegerField(
                default=2, help_text="Numero minimo di squadre per avviare il torneo"
            ),
        ),
        migrations.AddField(
            model_name="tournament",
            name="parent_tournament",
            field=models.ForeignKey(
                blank=True,
                help_text="Torneo 'padre' (es. Serie B è parent di playoff Serie B)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="child_tournaments",
                to="core.tournament",
            ),
        ),
        migrations.AddField(
            model_name="tournament",
            name="registration_deadline",
            field=models.DateField(
                blank=True, help_text="Scadenza per l'iscrizione", null=True
            ),
        ),
        migrations.AddField(
            model_name="tournament",
            name="status",
            field=models.CharField(
                choices=[
                    ("pending", "In attesa di inizio"),
                    ("active", "In corso"),
                    ("completed", "Completato"),
                    ("cancelled", "Annullato"),
                ],
                default="pending",
                help_text="Stato corrente del torneo",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="tournamentqualificationrule",
            name="group",
            field=models.CharField(
                blank=True,
                help_text="Gruppo specifico (se il torneo ha gironi)",
                max_length=50,
            ),
        ),
        migrations.AddField(
            model_name="tournamentqualificationrule",
            name="is_active",
            field=models.BooleanField(
                default=True, help_text="Indica se la regola è attiva"
            ),
        ),
        migrations.AddField(
            model_name="tournamentqualificationrule",
            name="qualification_type",
            field=models.CharField(
                choices=[
                    ("promotion", "Promozione"),
                    ("relegation", "Retrocessione"),
                    ("qualification", "Qualificazione"),
                    ("playoff", "Playoff"),
                    ("playout", "Playout"),
                ],
                default="qualification",
                help_text="Tipo di qualificazione",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="tournamentqualificationrule",
            name="season_offset",
            field=models.IntegerField(
                default=0,
                help_text="Offset stagione (0=stessa stagione, 1=stagione successiva)",
            ),
        ),
        migrations.AddField(
            model_name="tournamentranking",
            name="goals_against",
            field=models.PositiveIntegerField(default=0, help_text="Gol subiti"),
        ),
        migrations.AddField(
            model_name="tournamentranking",
            name="goals_for",
            field=models.PositiveIntegerField(default=0, help_text="Gol segnati"),
        ),
        migrations.AddField(
            model_name="tournamentranking",
            name="group",
            field=models.CharField(
                blank=True,
                help_text="Gruppo di appartenenza per tornei con gironi",
                max_length=50,
            ),
        ),
        migrations.AddField(
            model_name="tournamentranking",
            name="matches_played",
            field=models.PositiveIntegerField(
                default=0, help_text="Numero di partite giocate"
            ),
        ),
        migrations.AddField(
            model_name="tournamentranking",
            name="points",
            field=models.IntegerField(
                default=0, help_text="Punti totali in classifica"
            ),
        ),
        migrations.AddField(
            model_name="tournamentranking",
            name="points_penalty",
            field=models.IntegerField(default=0, help_text="Punti di penalizzazione"),
        ),
        migrations.AddField(
            model_name="tournamentranking",
            name="qualified",
            field=models.BooleanField(
                default=False,
                help_text="Indica se la squadra è qualificata al turno successivo",
            ),
        ),
        migrations.AddField(
            model_name="tournamentranking",
            name="red_cards",
            field=models.PositiveIntegerField(
                default=0, help_text="Cartellini rossi totali"
            ),
        ),
        migrations.AddField(
            model_name="tournamentranking",
            name="relegated",
            field=models.BooleanField(
                default=False, help_text="Indica se la squadra è retrocessa"
            ),
        ),
        migrations.AddField(
            model_name="tournamentranking",
            name="yellow_cards",
            field=models.PositiveIntegerField(
                default=0, help_text="Cartellini gialli totali"
            ),
        ),
        migrations.AddField(
            model_name="tournamentstructure",
            name="format",
            field=models.CharField(
                choices=[
                    ("league", "Campionato"),
                    ("cup", "Coppa a eliminazione diretta"),
                    ("group_stage", "Fase a gironi"),
                    ("hybrid", "Formato misto"),
                ],
                default="league",
                help_text="Formato base del torneo",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="tournamentstructure",
            name="has_knockout_stage",
            field=models.BooleanField(
                default=False,
                help_text="Indica se il torneo ha una fase finale a eliminazione diretta",
            ),
        ),
        migrations.AddField(
            model_name="tournamentstructure",
            name="legs",
            field=models.PositiveSmallIntegerField(
                default=2,
                help_text="Numero di partite per accoppiamento (1=solo andata, 2=andata e ritorno)",
            ),
        ),
        migrations.AddField(
            model_name="tournamentstructure",
            name="name",
            field=models.CharField(
                default="Standard",
                help_text="Nome della struttura (es. 'Campionato', 'Coppa')",
                max_length=100,
            ),
        ),
        migrations.AddField(
            model_name="tournamentstructure",
            name="promotion_teams",
            field=models.PositiveIntegerField(
                default=0, help_text="Numero di squadre promosse direttamente"
            ),
        ),
        migrations.AlterField(
            model_name="tournament",
            name="current_match_day",
            field=models.PositiveIntegerField(
                default=1, help_text="Giornata/turno corrente del torneo"
            ),
        ),
        migrations.AlterField(
            model_name="tournament",
            name="description",
            field=models.TextField(
                blank=True, help_text="Descrizione dettagliata del torneo"
            ),
        ),
        migrations.AlterField(
            model_name="tournament",
            name="name",
            field=models.CharField(
                help_text="Nome del torneo (es. Serie A, Coppa Italia)", max_length=100
            ),
        ),
        migrations.AlterField(
            model_name="tournament",
            name="season",
            field=models.ForeignKey(
                help_text="Stagione di appartenenza",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tournaments",
                to="core.season",
            ),
        ),
        migrations.AlterField(
            model_name="tournament",
            name="structure",
            field=models.ForeignKey(
                help_text="Struttura del torneo (campionato, coppa, ecc.)",
                on_delete=django.db.models.deletion.PROTECT,
                to="core.tournamentstructure",
            ),
        ),
        migrations.AlterField(
            model_name="tournament",
            name="teams",
            field=models.ManyToManyField(
                blank=True,
                help_text="Squadre partecipanti al torneo",
                related_name="tournaments",
                to="core.seasonteam",
            ),
        ),
        migrations.AlterField(
            model_name="tournament",
            name="trophy",
            field=models.ForeignKey(
                blank=True,
                help_text="Trofeo assegnato al vincitore",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="tournaments",
                to="core.trophy",
            ),
        ),
        migrations.AlterField(
            model_name="tournamentqualificationrule",
            name="description",
            field=models.CharField(
                blank=True, help_text="Descrizione della regola", max_length=255
            ),
        ),
        migrations.AlterField(
            model_name="tournamentqualificationrule",
            name="from_tournament",
            field=models.ForeignKey(
                help_text="Torneo di origine",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="qualification_rules",
                to="core.tournament",
            ),
        ),
        migrations.AlterField(
            model_name="tournamentqualificationrule",
            name="max_rank",
            field=models.PositiveIntegerField(
                help_text="Posizione massima per la qualificazione (es. 4)"
            ),
        ),
        migrations.AlterField(
            model_name="tournamentqualificationrule",
            name="min_rank",
            field=models.PositiveIntegerField(
                help_text="Posizione minima per la qualificazione (es. 1)"
            ),
        ),
        migrations.AlterField(
            model_name="tournamentqualificationrule",
            name="to_tournament",
            field=models.ForeignKey(
                help_text="Torneo di destinazione",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="qualified_from",
                to="core.tournament",
            ),
        ),
        migrations.AlterField(
            model_name="tournamentstructure",
            name="has_playoff",
            field=models.BooleanField(
                default=False, help_text="Indica se il torneo prevede playoff"
            ),
        ),
        migrations.AlterField(
            model_name="tournamentstructure",
            name="has_playout",
            field=models.BooleanField(
                default=False, help_text="Indica se il torneo prevede playout"
            ),
        ),
        migrations.AlterField(
            model_name="tournamentstructure",
            name="home_and_away",
            field=models.BooleanField(
                default=True,
                help_text="Indica se le partite si giocano andata e ritorno",
            ),
        ),
        migrations.AlterField(
            model_name="tournamentstructure",
            name="is_cup",
            field=models.BooleanField(
                default=False,
                help_text="Indica se è una competizione a eliminazione diretta",
            ),
        ),
        migrations.AlterField(
            model_name="tournamentstructure",
            name="playoff_teams",
            field=models.PositiveIntegerField(
                default=0, help_text="Numero di squadre partecipanti ai playoff"
            ),
        ),
        migrations.AlterField(
            model_name="tournamentstructure",
            name="playout_teams",
            field=models.PositiveIntegerField(
                default=0, help_text="Numero di squadre partecipanti ai playout"
            ),
        ),
        migrations.AlterField(
            model_name="tournamentstructure",
            name="qualification_spots",
            field=models.PositiveIntegerField(
                default=0, help_text="Posti per qualificazione a competizioni esterne"
            ),
        ),
        migrations.AlterField(
            model_name="tournamentstructure",
            name="relegation_enabled",
            field=models.BooleanField(
                default=False, help_text="Indica se sono previste retrocessioni"
            ),
        ),
        migrations.AlterField(
            model_name="tournamentstructure",
            name="relegation_teams",
            field=models.PositiveIntegerField(
                default=0, help_text="Numero di squadre retrocesse direttamente"
            ),
        ),
        migrations.AlterField(
            model_name="tournamentstructure",
            name="use_groups",
            field=models.BooleanField(
                default=False, help_text="Indica se il torneo usa una fase a gironi"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tournament",
            unique_together={("name", "season")},
        ),
        migrations.AlterUniqueTogether(
            name="tournamentranking",
            unique_together={("tournament", "team", "group")},
        ),
    ]
