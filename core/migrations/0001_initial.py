# Generated by Django 5.2.3 on 2025-06-27 10:20

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="DefaultFormation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "formation",
                    models.CharField(
                        help_text="Formazione in formato '4-3-3', '3-5-2', ecc.",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Descrizione della formazione"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Nationality",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("code", models.CharField(max_length=3, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="SeasonTeam",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="TournamentStructure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_cup", models.BooleanField(default=False)),
                ("use_groups", models.BooleanField(default=False)),
                ("home_and_away", models.BooleanField(default=True)),
                ("has_playoff", models.BooleanField(default=False)),
                ("has_playout", models.BooleanField(default=False)),
                ("relegation_enabled", models.BooleanField(default=False)),
                ("relegation_teams", models.PositiveIntegerField(default=0)),
                ("playoff_teams", models.PositiveIntegerField(default=0)),
                ("playout_teams", models.PositiveIntegerField(default=0)),
                ("qualification_spots", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="League",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="leagues",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Nome della persona", max_length=100),
                ),
                (
                    "surname",
                    models.CharField(
                        blank=True, help_text="Cognome della persona", max_length=100
                    ),
                ),
                (
                    "birth_date",
                    models.DateField(help_text="Data di nascita della persona"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "main_nationality",
                    models.ForeignKey(
                        blank=True,
                        help_text="Nazionalità principale della persona",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.nationality",
                    ),
                ),
                (
                    "other_nationalities",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Altre nazionalità della persona",
                        related_name="other_nationalities",
                        to="core.nationality",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Player",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "main_role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("P", "Portiere"),
                            ("D", "Difensore"),
                            ("C", "Centrocampista"),
                            ("A", "Attaccante"),
                        ],
                        help_text="Ruolo principale del giocatore",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "overall",
                    models.PositiveSmallIntegerField(
                        default=50, help_text="Overall del giocatore, da 1 a 100"
                    ),
                ),
                (
                    "value",
                    models.PositiveIntegerField(
                        default=0, help_text="Valore di mercato del giocatore"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "main_nationality",
                    models.ForeignKey(
                        help_text="Nazionalità principale del giocatore",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="players",
                        to="core.nationality",
                    ),
                ),
                (
                    "other_nationalities",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Altre nazionalità del giocatore, se esistenti",
                        related_name="other_players",
                        to="core.nationality",
                    ),
                ),
                (
                    "person",
                    models.OneToOneField(
                        help_text="Profilo del giocatore",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="player_profile",
                        to="core.person",
                    ),
                ),
            ],
            options={
                "verbose_name": "Giocatore",
                "verbose_name_plural": "Giocatori",
                "ordering": ["person__name", "person__surname", "person__birth_date"],
            },
        ),
        migrations.CreateModel(
            name="PlayerStatistics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("matches_played", models.PositiveIntegerField(default=0)),
                ("goals_scored", models.PositiveIntegerField(default=0)),
                ("assists_made", models.PositiveIntegerField(default=0)),
                ("yellow_cards", models.PositiveIntegerField(default=0)),
                ("red_cards", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "player",
                    models.OneToOneField(
                        help_text="Il giocatore a cui appartengono le statistiche",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="statistics",
                        to="core.player",
                        verbose_name="Giocatore",
                    ),
                ),
            ],
            options={
                "verbose_name": "Statistiche Giocatore",
                "verbose_name_plural": "Statistiche Giocatori",
                "ordering": [
                    "-matches_played",
                    "-goals_scored",
                    "-assists_made",
                    "-yellow_cards",
                    "-red_cards",
                ],
            },
        ),
        migrations.CreateModel(
            name="Season",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year", models.PositiveIntegerField()),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "league",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="seasons",
                        to="core.league",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Staff",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[("Coach", "Allenatore"), ("Scout", "Osservatore")],
                        help_text="Ruolo del membro dello staff",
                        max_length=50,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "person",
                    models.OneToOneField(
                        help_text="Profilo del membro dello staff",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="staff_profile",
                        to="core.person",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="staff",
                        to="core.seasonteam",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teams",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="seasonteam",
            name="team",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="season_teams",
                to="core.team",
            ),
        ),
        migrations.CreateModel(
            name="Match",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("home_score", models.PositiveIntegerField(blank=True, null=True)),
                ("away_score", models.PositiveIntegerField(blank=True, null=True)),
                ("played", models.BooleanField(default=False)),
                ("kickoff_datetime", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "away_team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="away_matches",
                        to="core.team",
                    ),
                ),
                (
                    "home_team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="home_matches",
                        to="core.team",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Manager",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="manager_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="manager",
                        to="core.team",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Tournament",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("current_match_day", models.PositiveIntegerField(default=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "season",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tournament",
                        to="core.season",
                    ),
                ),
                (
                    "teams",
                    models.ManyToManyField(
                        blank=True, related_name="tournaments", to="core.team"
                    ),
                ),
                (
                    "structure",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.tournamentstructure",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="seasonteam",
            name="tournament",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="season_teams",
                to="core.tournament",
            ),
        ),
        migrations.CreateModel(
            name="Round",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("match_day", models.PositiveIntegerField()),
                (
                    "label",
                    models.CharField(
                        blank=True,
                        help_text="Nome del turno, es. 'Ottavi di finale'",
                        max_length=100,
                    ),
                ),
                ("knockout_stage", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "matches",
                    models.ManyToManyField(
                        blank=True, related_name="rounds", to="core.match"
                    ),
                ),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rounds",
                        to="core.tournament",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="match",
            name="tournament",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="matches",
                to="core.tournament",
            ),
        ),
        migrations.CreateModel(
            name="TournamentQualificationRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("min_rank", models.PositiveIntegerField()),
                ("max_rank", models.PositiveIntegerField()),
                ("description", models.CharField(blank=True, max_length=255)),
                (
                    "from_tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qualification_rules",
                        to="core.tournament",
                    ),
                ),
                (
                    "to_tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qualified_from",
                        to="core.tournament",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Trophy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "trophy_img",
                    models.ImageField(blank=True, null=True, upload_to="trophies/"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "awarded_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trophies",
                        to="core.seasonteam",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="tournament",
            name="trophy",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="tournament",
                to="core.trophy",
            ),
        ),
        migrations.CreateModel(
            name="MatchHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rating", models.FloatField()),
                ("goals", models.PositiveIntegerField(default=0)),
                ("assists", models.PositiveIntegerField(default=0)),
                ("minutes_played", models.PositiveIntegerField(default=0)),
                ("is_starting", models.BooleanField(default=False)),
                ("yellow_cards", models.PositiveIntegerField(default=0)),
                ("red_cards", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "match",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="performances",
                        to="core.match",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="match_performances",
                        to="core.player",
                    ),
                ),
            ],
            options={
                "unique_together": {("player", "match")},
            },
        ),
        migrations.CreateModel(
            name="RosterSlot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_starting", models.BooleanField(default=False)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("P", "Portiere"),
                            ("D", "Difensore"),
                            ("C", "Centrocampista"),
                            ("A", "Attaccante"),
                        ],
                        default="C",
                        max_length=20,
                    ),
                ),
                ("shirt_number", models.PositiveIntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.player"
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roster",
                        to="core.seasonteam",
                    ),
                ),
            ],
            options={
                "ordering": ["team", "shirt_number"],
                "unique_together": {("team", "shirt_number")},
            },
        ),
        migrations.CreateModel(
            name="MatchEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("minute", models.PositiveIntegerField()),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("goal", "Goal"),
                            ("assist", "Assist"),
                            ("yellow_card", "Ammonizione"),
                            ("red_card", "Espulsione"),
                            ("substitution", "Sostituzione"),
                            ("injury", "Infortunio"),
                            ("penalty", "Rigore"),
                            ("own_goal", "Autogol"),
                            ("foul", "Fallo"),
                            ("corner", "Calcio d'angolo"),
                            ("offside", "Fuorigioco"),
                            ("save", "Parata"),
                            ("clearance", "Rinvio"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "match",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events",
                        to="core.match",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.player",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.seasonteam",
                    ),
                ),
            ],
            options={
                "ordering": ["minute"],
                "unique_together": {("match", "minute", "event_type", "player")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="seasonteam",
            unique_together={("team", "tournament")},
        ),
        migrations.CreateModel(
            name="Ranking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rank", models.PositiveIntegerField()),
                ("points", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rankings",
                        to="core.team",
                    ),
                ),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rankings",
                        to="core.tournament",
                    ),
                ),
            ],
            options={
                "unique_together": {("team", "tournament")},
            },
        ),
        migrations.CreateModel(
            name="Formations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tactic_name",
                    models.CharField(
                        default="4-3-3",
                        help_text="Nome della formazione, es. '4-3-3', '3-5-2', ecc.",
                        max_length=100,
                    ),
                ),
                (
                    "is_default_formation",
                    models.BooleanField(
                        default=False,
                        help_text="Indica se questa è la formazione predefinita per il torneo",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "default_formation",
                    models.ForeignKey(
                        blank=True,
                        help_text="Formazione predefinita associata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="default_formations",
                        to="core.defaultformation",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.seasonteam",
                    ),
                ),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.tournament",
                    ),
                ),
            ],
            options={
                "ordering": ["team", "tournament", "tactic_name"],
                "unique_together": {("team", "tournament", "tactic_name")},
            },
        ),
        migrations.CreateModel(
            name="TournamentRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("point_win", "Punti Vittoria"),
                            ("point_draw", "Punti Pareggio"),
                            ("point_loss", "Punti Sconfitta"),
                            ("goal_diff", "Differenza Reti"),
                            ("red_cards", "Cartellini Rossi"),
                            ("yellow_cards", "Cartellini Gialli"),
                            ("head_to_head", "Scontri Diretti"),
                            ("away_goals", "Gol in Trasferta"),
                            ("draw", "Pareggi"),
                        ],
                        help_text="Tipo di regola applicata nel torneo",
                        max_length=50,
                    ),
                ),
                (
                    "value",
                    models.IntegerField(
                        help_text="Valore della regola, ad esempio 3 punti per vittoria, 1 punto per pareggio, ecc."
                    ),
                ),
                (
                    "boolean_value",
                    models.BooleanField(
                        default=False,
                        help_text="Valore booleano per regole che richiedono un attivo/passivo",
                    ),
                ),
                (
                    "priority",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Priorità della regola, più basso è il numero, più alta è la priorità",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Indica se la regola è attiva"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Descrizione della regola"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rules",
                        to="core.tournament",
                    ),
                ),
            ],
            options={
                "unique_together": {("tournament", "rule_type")},
            },
        ),
        migrations.CreateModel(
            name="Transfer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fee",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Quota di trasferimento pagata per il giocatore",
                        max_digits=6,
                    ),
                ),
                ("transfer_date", models.DateField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "from_team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transfers_out",
                        to="core.seasonteam",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.player"
                    ),
                ),
                (
                    "to_team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transfers_in",
                        to="core.seasonteam",
                    ),
                ),
            ],
            options={
                "unique_together": {
                    ("player", "from_team", "to_team", "transfer_date")
                },
            },
        ),
    ]
